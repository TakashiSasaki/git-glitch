<?php
use PHPUnit\Framework\TestCase;

require_once 'to_althex.php';
require_once 'from_althex.php';

function uuid_create() {
    $data = openssl_random_pseudo_bytes(16);
    
    // Set version to 0100 (4)
    $data[6] = chr(ord($data[6]) & 0x0f | 0x40); 
    // Set bits 6-7 to 10
    $data[8] = chr(ord($data[8]) & 0x3f | 0x80); 
    
    // Output the 36 character UUID.
    return vsprintf('%s%s-%s-%s-%s-%s%s%s', str_split(bin2hex($data), 4));
}

class TestRoundtripTestCase extends TestCase {
    // Test from_althex with lowercase expected output
    public function testFromAlthexLowercase() {
        $this->assertEquals('1a3f', from_althex('hukz'));
        $this->assertEquals('00ff', from_althex('ggzz'));
    }
  
    // Test from_althex with uppercase expected output
    public function testFromAlthexUppercase() {
        $this->assertEquals('1A3F', from_althex('HUKZ'));
        $this->assertEquals('00FF', from_althex('GGZZ'));
    }

    // Test the roundtrip conversion
    public function testRoundTrip() {
        $hex_values = ['1A3F', '00FF', 'ABCD', '1234', 'FACE'];
        foreach ($hex_values as $hex_value) {
            $custom_value = to_althex($hex_value);
            $round_trip_value = from_althex($custom_value);
            $this->assertEquals($hex_value, $round_trip_value);
        }
    }

    // Test the roundtrip conversion for a UUID
    public function testUuidRoundTrip() {
        // Generate a UUID
        $original_uuid = strtoupper(uuid_create());
        // Convert UUID to custom hex representation
        $custom_uuid = to_althex($original_uuid);
        // Convert back to original UUID
        $result_uuid = from_althex($custom_uuid);
        // Verify that the original and the result are the same
        $this->assertEquals($original_uuid, $result_uuid);
    }

    // Test the rundtrip conversion for a long random hex string
    public function testLongStringRoundTrip() {
        // Generate a long string of random hexadecimal characters
        $long_hex_string = '';
        for ($i = 0; $i < 10000; $i++) {
            $long_hex_string .= dechex(mt_rand(0, 15));
        }
        $long_hex_string = strtoupper($long_hex_string);
        $custom_string = to_althex($long_hex_string);
        $round_trip_result = from_althex($custom_string);
        $this->assertEquals($long_hex_string, $round_trip_result);
    }
}

?>

