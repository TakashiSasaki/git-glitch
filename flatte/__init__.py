# flatte/__init__.py

"""
flatte Module
=============

This module provides utilities for flattening and unflattening complex nested data structures like dictionaries and lists in Python.

The module exports two primary functions:

- `flatten(input_data, path="", delimiter=".", output=None)`: This function takes a nested data structure and returns a list of tuples that represent the flattened data. Each tuple contains a string representing the 'path' to the data and the data itself.

- `unflatten(array_data, delimiter='.')`: This function takes a list of tuples generated by the `flatten` function and reconstructs the original nested data structure.

Both functions can handle data structures that are nested to any depth and can also handle a mix of dictionaries and lists.

Examples
--------

Flattening a nested dictionary:

>>> from flatte import flatten
>>> data = {'a': {'b': {'c': 1}}}
>>> flatten(data)
[('', {}), ('a', {}), ('a.b', {}), ('a.b.c', 1)]

Unflattening into the original dictionary:

>>> from flatte import unflatten
>>> flat_data = [('', {}), ('a', {}), ('a.b', {}), ('a.b.c', 1)]
>>> unflatten(flat_data)
{'a': {'b': {'c': 1}}}

Notes
-----

- The `flatten` function will raise a ValueError if any key in the dictionaries contains the delimiter.
- The `unflatten` function assumes that the input is well-formed, i.e., it does not perform extensive input validation.

"""

from .flatten import flatten
from .unflatten import unflatten

__all__ = ['flatten', 'unflatten']
